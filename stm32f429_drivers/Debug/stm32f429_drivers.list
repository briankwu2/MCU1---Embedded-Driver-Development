
stm32f429_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a08  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bb4  08000bb4  00010bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bc0  08000bc0  00010bc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000bc0  08000bc0  00010bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bc0  08000bc8  00010bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bc4  08000bc4  00010bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bc8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bc8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000176e  00000000  00000000  00010c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000048c  00000000  00000000  000123a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  00012838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d9  00000000  00000000  00012968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000d83  00000000  00000000  00012a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000152b  00000000  00000000  000137c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000093a8  00000000  00000000  00014cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000404  00000000  00000000  0001e098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0001e49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000b9c 	.word	0x08000b9c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000b9c 	.word	0x08000b9c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <SPI_GPIOInits>:
PA6 -> SPI1_MISO
PA7 -> SPI1_MOSI
AF5
*/

void SPI_GPIOInits(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	GPIO_PinConfig_t PinConfig = SPIPins.GPIO_PinConfig;
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	f107 0210 	add.w	r2, r7, #16
 8000208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800020c:	e883 0003 	stmia.w	r3, {r0, r1}
	SPIPins.pGPIOx = GPIOA;
 8000210:	4b15      	ldr	r3, [pc, #84]	; (8000268 <SPI_GPIOInits+0x6c>)
 8000212:	60fb      	str	r3, [r7, #12]
	PinConfig.GPIO_PinAltFunMode = 5;
 8000214:	2305      	movs	r3, #5
 8000216:	817b      	strh	r3, [r7, #10]
	PinConfig.GPIO_PinOPType =  GPIO_OP_TYPE_PP;
 8000218:	2300      	movs	r3, #0
 800021a:	723b      	strb	r3, [r7, #8]
	PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021c:	2302      	movs	r3, #2
 800021e:	717b      	strb	r3, [r7, #5]
	PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000220:	2302      	movs	r3, #2
 8000222:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000224:	2300      	movs	r3, #0
 8000226:	71fb      	strb	r3, [r7, #7]

	// NSS
	PinConfig.GPIO_pinNumber = GPIO_PIN_NO_4;
 8000228:	2304      	movs	r3, #4
 800022a:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 800022c:	f107 030c 	add.w	r3, r7, #12
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f99f 	bl	8000574 <GPIO_Init>

	// SCLK
	PinConfig.GPIO_pinNumber = GPIO_PIN_NO_5;
 8000236:	2305      	movs	r3, #5
 8000238:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f998 	bl	8000574 <GPIO_Init>

	// MISO
	PinConfig.GPIO_pinNumber = GPIO_PIN_NO_6;
 8000244:	2306      	movs	r3, #6
 8000246:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 8000248:	f107 030c 	add.w	r3, r7, #12
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f991 	bl	8000574 <GPIO_Init>

	// MOSI 
	PinConfig.GPIO_pinNumber = GPIO_PIN_NO_7;
 8000252:	2307      	movs	r3, #7
 8000254:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 8000256:	f107 030c 	add.w	r3, r7, #12
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f98a 	bl	8000574 <GPIO_Init>

} 
 8000260:	bf00      	nop
 8000262:	3718      	adds	r7, #24
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40020000 	.word	0x40020000

0800026c <SPI1_Inits>:

void SPI1_Inits(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1_Handle;
	SPI_Config_t SPIConfig = SPI1_Handle.SPIConfig;
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	f107 0210 	add.w	r2, r7, #16
 8000278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027c:	e883 0003 	stmia.w	r3, {r0, r1}
	
	SPI1_Handle.pSPIx = SPI1;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <SPI1_Inits+0x48>)
 8000282:	60fb      	str	r3, [r7, #12]
	SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000284:	2301      	movs	r3, #1
 8000286:	717b      	strb	r3, [r7, #5]
	SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000288:	2301      	movs	r3, #1
 800028a:	713b      	strb	r3, [r7, #4]
	SPIConfig.SPI_SCLKSpeed = SPI_SCLKSPEED_DIV2;
 800028c:	2300      	movs	r3, #0
 800028e:	71bb      	strb	r3, [r7, #6]
	SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000290:	2300      	movs	r3, #0
 8000292:	71fb      	strb	r3, [r7, #7]
	SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	723b      	strb	r3, [r7, #8]
	SPIConfig.SPI_CPHA = SPI_CPHA_FIRST;
 8000298:	2300      	movs	r3, #0
 800029a:	727b      	strb	r3, [r7, #9]
	SPIConfig.SPI_SSM = SPI_SSM_EN;
 800029c:	2301      	movs	r3, #1
 800029e:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1_Handle);
 80002a0:	f107 030c 	add.w	r3, r7, #12
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fb8f 	bl	80009c8 <SPI_Init>

}
 80002aa:	bf00      	nop
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40013000 	.word	0x40013000

080002b8 <main>:

int main(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <main+0x30>)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// Initialize the GPIO Pins for the SPI1 Pins
	SPI_GPIOInits();
 80002c8:	f7ff ff98 	bl	80001fc <SPI_GPIOInits>

	// Initialize the SPI2 Peripheral Parameters
	SPI1_Inits();
 80002cc:	f7ff ffce 	bl	800026c <SPI1_Inits>

	SPI_SendData(SPI1, (uint8_t *) user_data, strlen(user_data));
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff8a 	bl	80001ec <strlen>
 80002d8:	4602      	mov	r2, r0
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4803      	ldr	r0, [pc, #12]	; (80002ec <main+0x34>)
 80002e0:	f000 fbde 	bl	8000aa0 <SPI_SendData>

	while(1);
 80002e4:	e7fe      	b.n	80002e4 <main+0x2c>
 80002e6:	bf00      	nop
 80002e8:	08000bb4 	.word	0x08000bb4
 80002ec:	40013000 	.word	0x40013000

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 fc19 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ffc9 	bl	80002b8 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	08000bc8 	.word	0x08000bc8
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <GPIO_PeriClockControl>:
 * 
 * @param pGPIOx - Address to GPIOx Peipheral
 * @param EnOrDI - Enable or Disable
 * 
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDI) {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDI == ENABLE) {
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d178      	bne.n	8000448 <GPIO_PeriClockControl+0x104>
        if (pGPIOx == GPIOA) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a7a      	ldr	r2, [pc, #488]	; (8000544 <GPIO_PeriClockControl+0x200>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x28>
            GPIOA_P_CLK_EN();
 800035e:	4b7a      	ldr	r3, [pc, #488]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a79      	ldr	r2, [pc, #484]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
        } else if (pGPIOx == GPIOK) {
            GPIOK_P_CLK_DI();
        }

    }
}
 800036a:	e0e5      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOB) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a77      	ldr	r2, [pc, #476]	; (800054c <GPIO_PeriClockControl+0x208>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x3e>
            GPIOB_P_CLK_EN();
 8000374:	4b74      	ldr	r3, [pc, #464]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a73      	ldr	r2, [pc, #460]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800037a:	f043 0302 	orr.w	r3, r3, #2
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e0da      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOC) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a72      	ldr	r2, [pc, #456]	; (8000550 <GPIO_PeriClockControl+0x20c>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x54>
            GPIOC_P_CLK_EN();
 800038a:	4b6f      	ldr	r3, [pc, #444]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a6e      	ldr	r2, [pc, #440]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e0cf      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOD) {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a6e      	ldr	r2, [pc, #440]	; (8000554 <GPIO_PeriClockControl+0x210>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x6a>
            GPIOD_P_CLK_EN();
 80003a0:	4b69      	ldr	r3, [pc, #420]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a68      	ldr	r2, [pc, #416]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e0c4      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOE) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a69      	ldr	r2, [pc, #420]	; (8000558 <GPIO_PeriClockControl+0x214>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x80>
            GPIOE_P_CLK_EN();
 80003b6:	4b64      	ldr	r3, [pc, #400]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a63      	ldr	r2, [pc, #396]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003bc:	f043 0310 	orr.w	r3, r3, #16
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e0b9      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a65      	ldr	r2, [pc, #404]	; (800055c <GPIO_PeriClockControl+0x218>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x96>
            GPIOF_P_CLK_EN();
 80003cc:	4b5e      	ldr	r3, [pc, #376]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a5d      	ldr	r2, [pc, #372]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e0ae      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOG) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a60      	ldr	r2, [pc, #384]	; (8000560 <GPIO_PeriClockControl+0x21c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0xac>
            GPIOG_P_CLK_EN();
 80003e2:	4b59      	ldr	r3, [pc, #356]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a58      	ldr	r2, [pc, #352]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e0a3      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOH) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a5c      	ldr	r2, [pc, #368]	; (8000564 <GPIO_PeriClockControl+0x220>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0xc2>
            GPIOH_P_CLK_EN();
 80003f8:	4b53      	ldr	r3, [pc, #332]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a52      	ldr	r2, [pc, #328]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e098      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOI) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a57      	ldr	r2, [pc, #348]	; (8000568 <GPIO_PeriClockControl+0x224>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0xd8>
            GPIOI_P_CLK_EN();
 800040e:	4b4e      	ldr	r3, [pc, #312]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a4d      	ldr	r2, [pc, #308]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e08d      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOJ) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a53      	ldr	r2, [pc, #332]	; (800056c <GPIO_PeriClockControl+0x228>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0xee>
            GPIOJ_P_CLK_EN();
 8000424:	4b48      	ldr	r3, [pc, #288]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a47      	ldr	r2, [pc, #284]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e082      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOK) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a4e      	ldr	r2, [pc, #312]	; (8000570 <GPIO_PeriClockControl+0x22c>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d17e      	bne.n	8000538 <GPIO_PeriClockControl+0x1f4>
            GPIOK_P_CLK_EN();
 800043a:	4b43      	ldr	r3, [pc, #268]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a42      	ldr	r2, [pc, #264]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e077      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        if (pGPIOx == GPIOA) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a3e      	ldr	r2, [pc, #248]	; (8000544 <GPIO_PeriClockControl+0x200>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x11a>
            GPIOA_P_CLK_DI();
 8000450:	4b3d      	ldr	r3, [pc, #244]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a3c      	ldr	r2, [pc, #240]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000456:	f023 0301 	bic.w	r3, r3, #1
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e06c      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOB) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a3a      	ldr	r2, [pc, #232]	; (800054c <GPIO_PeriClockControl+0x208>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x130>
            GPIOB_P_CLK_DI();
 8000466:	4b38      	ldr	r3, [pc, #224]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a37      	ldr	r2, [pc, #220]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800046c:	f023 0302 	bic.w	r3, r3, #2
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e061      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOC) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a36      	ldr	r2, [pc, #216]	; (8000550 <GPIO_PeriClockControl+0x20c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x146>
            GPIOC_P_CLK_DI();
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a31      	ldr	r2, [pc, #196]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000482:	f023 0304 	bic.w	r3, r3, #4
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e056      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOD) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a31      	ldr	r2, [pc, #196]	; (8000554 <GPIO_PeriClockControl+0x210>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x15c>
            GPIOD_P_CLK_DI();
 8000492:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a2c      	ldr	r2, [pc, #176]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000498:	f023 0308 	bic.w	r3, r3, #8
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e04b      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOE) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a2d      	ldr	r2, [pc, #180]	; (8000558 <GPIO_PeriClockControl+0x214>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0x172>
            GPIOE_P_CLK_DI();
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a26      	ldr	r2, [pc, #152]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004ae:	f023 0310 	bic.w	r3, r3, #16
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	e040      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOF) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a28      	ldr	r2, [pc, #160]	; (800055c <GPIO_PeriClockControl+0x218>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x188>
            GPIOF_P_CLK_DI();
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	4a21      	ldr	r2, [pc, #132]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004c4:	f023 0320 	bic.w	r3, r3, #32
 80004c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ca:	e035      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOG) {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a24      	ldr	r2, [pc, #144]	; (8000560 <GPIO_PeriClockControl+0x21c>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0x19e>
            GPIOG_P_CLK_DI();
 80004d4:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e02a      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOH) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a1f      	ldr	r2, [pc, #124]	; (8000564 <GPIO_PeriClockControl+0x220>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0x1b4>
            GPIOH_P_CLK_DI();
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a16      	ldr	r2, [pc, #88]	; (8000548 <GPIO_PeriClockControl+0x204>)
 80004f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e01f      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOI) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <GPIO_PeriClockControl+0x224>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d106      	bne.n	800050e <GPIO_PeriClockControl+0x1ca>
            GPIOI_P_CLK_DI();
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e014      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOJ) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <GPIO_PeriClockControl+0x228>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0x1e0>
            GPIOJ_P_CLK_DI();
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800051c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e009      	b.n	8000538 <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOK) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <GPIO_PeriClockControl+0x22c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d105      	bne.n	8000538 <GPIO_PeriClockControl+0x1f4>
            GPIOK_P_CLK_DI();
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <GPIO_PeriClockControl+0x204>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <GPIO_PeriClockControl+0x204>)
 8000532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	40020000 	.word	0x40020000
 8000548:	40023800 	.word	0x40023800
 800054c:	40020400 	.word	0x40020400
 8000550:	40020800 	.word	0x40020800
 8000554:	40020c00 	.word	0x40020c00
 8000558:	40021000 	.word	0x40021000
 800055c:	40021400 	.word	0x40021400
 8000560:	40021800 	.word	0x40021800
 8000564:	40021c00 	.word	0x40021c00
 8000568:	40022000 	.word	0x40022000
 800056c:	40022400 	.word	0x40022400
 8000570:	40022800 	.word	0x40022800

08000574 <GPIO_Init>:
/**
 * @brief Initializes the GPIO peripheral using the given handle
 * 
 * @param pGPIOHandle - Handle of the given GPIO Peripheral with desired configurations
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    // Inner enum to make some logic easier

    //1. Configure the Mode of the GPIO Pin
    uint32_t temp = 0; // Temp Register for holding configuration values to set to the real register
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_PIN_MODE pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


    // Enable the Peripheral Clock
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2101      	movs	r1, #1
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fed5 	bl	8000344 <GPIO_PeriClockControl>
    // Non-Interrupt Modes
    if (pinMode <= GPIO_MODE_ANALOG) {
 800059a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d81e      	bhi.n	80005e0 <GPIO_Init+0x6c>

        // Changed for better readability
        // temp = pinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber)

        // "2 *" is for the 2 bits per pin used to set the mods
        temp = pinMode << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 80005a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80005a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Set the real register
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pinNumber); // Resets
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	2103      	movs	r1, #3
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; // Sets
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6819      	ldr	r1, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d6:	430a      	orrs	r2, r1
 80005d8:	601a      	str	r2, [r3, #0]
        temp = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005de:	e087      	b.n	80006f0 <GPIO_Init+0x17c>

        // 1. Configure the Edge Detection
        /*
            The pin number is the same as the specific EXTIx line. It is muxed, and the GPIO port is selected later
        */
        if (pinMode >= GPIO_MODE_ANALOG) { // If interrupt option mode
 80005e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d94d      	bls.n	8000684 <GPIO_Init+0x110>
            switch (pinMode) {
 80005e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d032      	beq.n	8000656 <GPIO_Init+0xe2>
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	dc46      	bgt.n	8000682 <GPIO_Init+0x10e>
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d002      	beq.n	80005fe <GPIO_Init+0x8a>
 80005f8:	2b05      	cmp	r3, #5
 80005fa:	d016      	beq.n	800062a <GPIO_Init+0xb6>
                case GPIO_MODE_IT_RFT:
                    EXTI->FTSR |= (1 << pinNumber);
                    EXTI->RTSR |= ~(1 << pinNumber);
                    break;
                default:
                    break;
 80005fc:	e041      	b.n	8000682 <GPIO_Init+0x10e>
                    EXTI->FTSR |= (1 << pinNumber);
 80005fe:	4b88      	ldr	r3, [pc, #544]	; (8000820 <GPIO_Init+0x2ac>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	2101      	movs	r1, #1
 8000604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a84      	ldr	r2, [pc, #528]	; (8000820 <GPIO_Init+0x2ac>)
 800060e:	430b      	orrs	r3, r1
 8000610:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR &= ~(1 << pinNumber);
 8000612:	4b83      	ldr	r3, [pc, #524]	; (8000820 <GPIO_Init+0x2ac>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	2101      	movs	r1, #1
 8000618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a7f      	ldr	r2, [pc, #508]	; (8000820 <GPIO_Init+0x2ac>)
 8000624:	400b      	ands	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
                    break;
 8000628:	e02c      	b.n	8000684 <GPIO_Init+0x110>
                    EXTI->FTSR &= (1 << pinNumber);
 800062a:	4b7d      	ldr	r3, [pc, #500]	; (8000820 <GPIO_Init+0x2ac>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	2101      	movs	r1, #1
 8000630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a79      	ldr	r2, [pc, #484]	; (8000820 <GPIO_Init+0x2ac>)
 800063a:	400b      	ands	r3, r1
 800063c:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR |= ~(1 << pinNumber);
 800063e:	4b78      	ldr	r3, [pc, #480]	; (8000820 <GPIO_Init+0x2ac>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	2101      	movs	r1, #1
 8000644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	4611      	mov	r1, r2
 800064e:	4a74      	ldr	r2, [pc, #464]	; (8000820 <GPIO_Init+0x2ac>)
 8000650:	430b      	orrs	r3, r1
 8000652:	6093      	str	r3, [r2, #8]
                    break;
 8000654:	e016      	b.n	8000684 <GPIO_Init+0x110>
                    EXTI->FTSR |= (1 << pinNumber);
 8000656:	4b72      	ldr	r3, [pc, #456]	; (8000820 <GPIO_Init+0x2ac>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	2101      	movs	r1, #1
 800065c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a6e      	ldr	r2, [pc, #440]	; (8000820 <GPIO_Init+0x2ac>)
 8000666:	430b      	orrs	r3, r1
 8000668:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR |= ~(1 << pinNumber);
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <GPIO_Init+0x2ac>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	2101      	movs	r1, #1
 8000670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a69      	ldr	r2, [pc, #420]	; (8000820 <GPIO_Init+0x2ac>)
 800067c:	430b      	orrs	r3, r1
 800067e:	6093      	str	r3, [r2, #8]
                    break;
 8000680:	e000      	b.n	8000684 <GPIO_Init+0x110>
                    break;
 8000682:	bf00      	nop
            }

        }
        // 2. Configure the GPIO Port Selection in SYSCFG_EXTICR
        uint8_t SYSCFGIndex = pinNumber / 4;
 8000684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint8_t SYSCFGOffset = pinNumber % 4;
 800068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t portCode = getPortCode(pGPIOHandle->pGPIOx);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 f8c5 	bl	800082c <getPortCode>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        SYSCFG_P_CLK_EN();
 80006a8:	4b5e      	ldr	r3, [pc, #376]	; (8000824 <GPIO_Init+0x2b0>)
 80006aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ac:	4a5d      	ldr	r2, [pc, #372]	; (8000824 <GPIO_Init+0x2b0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6453      	str	r3, [r2, #68]	; 0x44

        SYSCFG->EXTICR[SYSCFGIndex] |= portCode << SYSCFGOffset;
 80006b4:	4a5c      	ldr	r2, [pc, #368]	; (8000828 <GPIO_Init+0x2b4>)
 80006b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006ba:	3302      	adds	r3, #2
 80006bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80006c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	4956      	ldr	r1, [pc, #344]	; (8000828 <GPIO_Init+0x2b4>)
 80006d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006d4:	4302      	orrs	r2, r0
 80006d6:	3302      	adds	r3, #2
 80006d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // 3. Enable the EXTI Interrupt Delivery using IMR
        EXTI->IMR |= (1 << pinNumber); //
 80006dc:	4b50      	ldr	r3, [pc, #320]	; (8000820 <GPIO_Init+0x2ac>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2101      	movs	r1, #1
 80006e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a4d      	ldr	r2, [pc, #308]	; (8000820 <GPIO_Init+0x2ac>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
        

    }

    //2. Configure the Speed
    uint32_t pinSpeed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	799b      	ldrb	r3, [r3, #6]
 80006f4:	623b      	str	r3, [r7, #32]
    // "2 *" is for the 2 bits per pin used to set the mods
    temp = pinSpeed << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 80006f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	6a3a      	ldr	r2, [r7, #32]
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pinNumber); // Resets
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	2103      	movs	r1, #3
 800070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4619      	mov	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	400a      	ands	r2, r1
 800071a:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Set the real register
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6899      	ldr	r1, [r3, #8]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000728:	430a      	orrs	r2, r1
 800072a:	609a      	str	r2, [r3, #8]
    temp = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c


    //3. Configure the Pullup-Pulldown Settings
    uint32_t pinPUPD = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	79db      	ldrb	r3, [r3, #7]
 8000734:	61fb      	str	r3, [r7, #28]
    // "2 *" is for the 2 bits per pin used to set the mods
    temp = pinPUPD << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	69fa      	ldr	r2, [r7, #28]
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pinNumber); // Resets
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	2103      	movs	r1, #3
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp; // Set the real register
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68d9      	ldr	r1, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000768:	430a      	orrs	r2, r1
 800076a:	60da      	str	r2, [r3, #12]
    temp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c

    //4. Configure the Output Type
    uint32_t pinOPType = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7a1b      	ldrb	r3, [r3, #8]
 8000774:	61bb      	str	r3, [r7, #24]
    temp = pinOPType << pinNumber; // Shifts the pinMode to apply to the correct pin.
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pinNumber); // Resets
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	2103      	movs	r1, #3
 8000788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	400a      	ands	r2, r1
 8000798:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp; // Set the real register
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6859      	ldr	r1, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a6:	430a      	orrs	r2, r1
 80007a8:	605a      	str	r2, [r3, #4]
    temp = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c

    //5. Configure the Alternate Functionality
    if (pinMode == GPIO_MODE_ALTFN) {
 80007ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d130      	bne.n	8000818 <GPIO_Init+0x2a4>
        // Configure the Alt Function Registers

        // Calculate the position of the pin's register
        uint32_t AFRIndex = pinNumber / 8;
 80007b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	617b      	str	r3, [r7, #20]
        uint32_t AFROffset = 4 * (pinNumber % 8); // "4 *" as each pin takes 4 bits
 80007bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
        uint32_t AFRvalue = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	895b      	ldrh	r3, [r3, #10]
 80007ca:	60fb      	str	r3, [r7, #12]
        temp = AFRvalue << AFROffset;
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pGPIOHandle->pGPIOx->AFR[AFRIndex] &= ~(0x3 << pinNumber); // Resets
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	3208      	adds	r2, #8
 80007de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007e2:	2103      	movs	r1, #3
 80007e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	4619      	mov	r1, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4011      	ands	r1, r2
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	3208      	adds	r2, #8
 80007f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[AFRIndex] |= temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	3208      	adds	r2, #8
 8000804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800080e:	4311      	orrs	r1, r2
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	3208      	adds	r2, #8
 8000814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	; 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40023800 	.word	0x40023800
 8000828:	40013800 	.word	0x40013800

0800082c <getPortCode>:
/**
 * @brief Helper Functions
 * 
 */

uint8_t getPortCode(GPIO_RegDef_t* pGPIOx) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
        PORT_GPIOK
    } GPIO_PORT;

    GPIO_PORT portCode;

    if (pGPIOx == GPIOA) { 
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a29      	ldr	r2, [pc, #164]	; (80008dc <getPortCode+0xb0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d102      	bne.n	8000842 <getPortCode+0x16>
        portCode = PORT_GPIOA;
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e044      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOB) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <getPortCode+0xb4>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d102      	bne.n	8000850 <getPortCode+0x24>
        portCode = PORT_GPIOB;
 800084a:	2301      	movs	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e03d      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOC) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a24      	ldr	r2, [pc, #144]	; (80008e4 <getPortCode+0xb8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d102      	bne.n	800085e <getPortCode+0x32>
        portCode = PORT_GPIOC;
 8000858:	2302      	movs	r3, #2
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e036      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOD) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <getPortCode+0xbc>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d102      	bne.n	800086c <getPortCode+0x40>
        portCode = PORT_GPIOD;
 8000866:	2303      	movs	r3, #3
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e02f      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOE) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <getPortCode+0xc0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d102      	bne.n	800087a <getPortCode+0x4e>
        portCode = PORT_GPIOE;
 8000874:	2304      	movs	r3, #4
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e028      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOF) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <getPortCode+0xc4>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d102      	bne.n	8000888 <getPortCode+0x5c>
        portCode = PORT_GPIOF;
 8000882:	2305      	movs	r3, #5
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e021      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOG) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <getPortCode+0xc8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d102      	bne.n	8000896 <getPortCode+0x6a>
        portCode = PORT_GPIOG;
 8000890:	2306      	movs	r3, #6
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e01a      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOH) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <getPortCode+0xcc>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d102      	bne.n	80008a4 <getPortCode+0x78>
        portCode = PORT_GPIOH;
 800089e:	2307      	movs	r3, #7
 80008a0:	73fb      	strb	r3, [r7, #15]
 80008a2:	e013      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOI) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <getPortCode+0xd0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d102      	bne.n	80008b2 <getPortCode+0x86>
        portCode = PORT_GPIOI;
 80008ac:	2308      	movs	r3, #8
 80008ae:	73fb      	strb	r3, [r7, #15]
 80008b0:	e00c      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOJ) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <getPortCode+0xd4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d102      	bne.n	80008c0 <getPortCode+0x94>
        portCode = PORT_GPIOJ;
 80008ba:	2309      	movs	r3, #9
 80008bc:	73fb      	strb	r3, [r7, #15]
 80008be:	e005      	b.n	80008cc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOK) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <getPortCode+0xd8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d101      	bne.n	80008cc <getPortCode+0xa0>
        portCode = PORT_GPIOK;
 80008c8:	230a      	movs	r3, #10
 80008ca:	73fb      	strb	r3, [r7, #15]
    }

    return ((uint8_t) portCode);
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40021400 	.word	0x40021400
 80008f4:	40021800 	.word	0x40021800
 80008f8:	40021c00 	.word	0x40021c00
 80008fc:	40022000 	.word	0x40022000
 8000900:	40022400 	.word	0x40022400
 8000904:	40022800 	.word	0x40022800

08000908 <SPI_PeriClockControl>:
 * @brief Enables or disables the peripheral clock for SPI Peripherals 
 * 
 * @param pGPIOx 
 * @param EnorDI 
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDI) { 
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
    switch (EnorDI) {
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d022      	beq.n	8000960 <SPI_PeriClockControl+0x58>
 800091a:	2b01      	cmp	r3, #1
 800091c:	d141      	bne.n	80009a2 <SPI_PeriClockControl+0x9a>
        case ENABLE:
            if (pSPIx == SPI1) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <SPI_PeriClockControl+0xb0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d106      	bne.n	8000934 <SPI_PeriClockControl+0x2c>
                SPI1_P_CLK_EN();
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a24      	ldr	r2, [pc, #144]	; (80009bc <SPI_PeriClockControl+0xb4>)
 800092c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
            } else if (pSPIx == SPI2) {
                SPI2_P_CLK_EN();
            } else if (pSPIx == SPI3) {
                SPI3_P_CLK_EN();
            }
            break;
 8000932:	e038      	b.n	80009a6 <SPI_PeriClockControl+0x9e>
            } else if (pSPIx == SPI2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SPI_PeriClockControl+0xb8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d106      	bne.n	800094a <SPI_PeriClockControl+0x42>
                SPI2_P_CLK_EN();
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <SPI_PeriClockControl+0xb4>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8000948:	e02d      	b.n	80009a6 <SPI_PeriClockControl+0x9e>
            } else if (pSPIx == SPI3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <SPI_PeriClockControl+0xbc>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d129      	bne.n	80009a6 <SPI_PeriClockControl+0x9e>
                SPI3_P_CLK_EN();
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 800095e:	e022      	b.n	80009a6 <SPI_PeriClockControl+0x9e>
        case DISABLE:
            if (pSPIx == SPI1) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <SPI_PeriClockControl+0xb0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d106      	bne.n	8000976 <SPI_PeriClockControl+0x6e>
                SPI1_P_CLK_DI();
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <SPI_PeriClockControl+0xb4>)
 800096a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <SPI_PeriClockControl+0xb4>)
 800096e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000972:	6453      	str	r3, [r2, #68]	; 0x44
            } else if (pSPIx == SPI2) {
                SPI2_P_CLK_DI();
            } else if (pSPIx == SPI3) {
                SPI3_P_CLK_DI();
            }
            break;
 8000974:	e019      	b.n	80009aa <SPI_PeriClockControl+0xa2>
            } else if (pSPIx == SPI2) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <SPI_PeriClockControl+0xb8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d106      	bne.n	800098c <SPI_PeriClockControl+0x84>
                SPI2_P_CLK_DI();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 800098a:	e00e      	b.n	80009aa <SPI_PeriClockControl+0xa2>
            } else if (pSPIx == SPI3) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <SPI_PeriClockControl+0xbc>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d10a      	bne.n	80009aa <SPI_PeriClockControl+0xa2>
                SPI3_P_CLK_DI();
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <SPI_PeriClockControl+0xb4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <SPI_PeriClockControl+0xb4>)
 800099a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 80009a0:	e003      	b.n	80009aa <SPI_PeriClockControl+0xa2>
        default:
            break;
 80009a2:	bf00      	nop
 80009a4:	e002      	b.n	80009ac <SPI_PeriClockControl+0xa4>
            break;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <SPI_PeriClockControl+0xa4>
            break;
 80009aa:	bf00      	nop
    }
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40013000 	.word	0x40013000
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40003800 	.word	0x40003800
 80009c4:	40003c00 	.word	0x40003c00

080009c8 <SPI_Init>:
 * @brief Initializes the SPI peripheral with the appropriate configurations
 * 
 * @param pSPIHandle Used to identify which SPIx port, and the configurations used to set
 * the SPI
 */
void SPI_Init(SPI_Handle_t *pSPIHandle) { 
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
    SPI_RegDef_t *pSPIx = pSPIHandle->pSPIx; 
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	613b      	str	r3, [r7, #16]
    SPI_Config_t SPIConfig = pSPIHandle->SPIConfig;
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	3204      	adds	r2, #4
 80009de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e2:	e883 0003 	stmia.w	r3, {r0, r1}
    uint32_t temp = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]


    // Enable SPI Peripheral Clock
    SPI_PeriClockControl(pSPIx, ENABLE);
 80009ea:	2101      	movs	r1, #1
 80009ec:	6938      	ldr	r0, [r7, #16]
 80009ee:	f7ff ff8b 	bl	8000908 <SPI_PeriClockControl>
    
    // CR1 Register Configuration

    // Device Mode
    temp |= (SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 80009f2:	7a3b      	ldrb	r3, [r7, #8]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	461a      	mov	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]
    
    // Bus Config
    switch(SPIConfig.SPI_BusConfig) {
 80009fe:	7a7b      	ldrb	r3, [r7, #9]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d826      	bhi.n	8000a54 <SPI_Init+0x8c>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <SPI_Init+0x44>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a27 	.word	0x08000a27
 8000a14:	08000a31 	.word	0x08000a31
 8000a18:	08000a43 	.word	0x08000a43
        case SPI_BUS_CONFIG_FD:
            temp &= ~(1 << SPI_CR1_BIDI_MODE); // 2 Line Unidirectional Option
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a22:	617b      	str	r3, [r7, #20]
            break;
 8000a24:	e017      	b.n	8000a56 <SPI_Init+0x8e>
        case SPI_BUS_CONFIG_HD:
            temp |= (1 << SPI_CR1_BIDI_MODE); // 1 Line Bidirectional Option
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2c:	617b      	str	r3, [r7, #20]
            break;
 8000a2e:	e012      	b.n	8000a56 <SPI_Init+0x8e>
        case SPI_BUS_CONFIG_SIMPLEX_TXONLY:
            temp |= (1 << SPI_CR1_BIDI_MODE); // 1 Line Bidirectional Option
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a36:	617b      	str	r3, [r7, #20]
            temp |= (1 << SPI_CR1_BIDI_OE); // Transmit Only
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	617b      	str	r3, [r7, #20]
            break;
 8000a40:	e009      	b.n	8000a56 <SPI_Init+0x8e>
        case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
            temp |= (1 << SPI_CR1_BIDI_MODE); // 1 Line Bidirectional Option
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a48:	617b      	str	r3, [r7, #20]
            temp &= ~(1 << SPI_CR1_BIDI_OE); // Receive Only
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a50:	617b      	str	r3, [r7, #20]
            break;
 8000a52:	e000      	b.n	8000a56 <SPI_Init+0x8e>
        default:
            break;
 8000a54:	bf00      	nop
    }

    // SCLK Speed Mode
    temp |= (SPIConfig.SPI_SCLKSpeed << SPI_CR1_BR); // Sets 3 Bits
 8000a56:	7abb      	ldrb	r3, [r7, #10]
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	617b      	str	r3, [r7, #20]

    // SPI Data Frame Format
    temp |= (SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	02db      	lsls	r3, r3, #11
 8000a66:	461a      	mov	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]

    // SPI CPOL
    temp |= (SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	461a      	mov	r2, r3
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]

    // SPI CPHA
    temp |= (SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000a7a:	7b7b      	ldrb	r3, [r7, #13]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	617b      	str	r3, [r7, #20]

    // SPI SSM
    temp |= (SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	025b      	lsls	r3, r3, #9
 8000a88:	461a      	mov	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	617b      	str	r3, [r7, #20]

    pSPIx->CR1 = temp; // Set the Register with configuration values
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	601a      	str	r2, [r3, #0]

    
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop

08000aa0 <SPI_SendData>:
 * 
 * @param pSPIx - Contains the SPI port to send data over 
 * @param pTxBuffer - Pointer to buffer of data to send
 * @param len - length of the data
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len) { 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
    uint8_t TxEmpty;
    uint8_t numBytes;
    uint16_t DFFStatus = (pSPIx->CR1 >> SPI_CR1_DFF) & (0x0001);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	0adb      	lsrs	r3, r3, #11
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	82bb      	strh	r3, [r7, #20]

    if (DFFStatus == 0) {
 8000aba:	8abb      	ldrh	r3, [r7, #20]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <SPI_SendData+0x26>
        numBytes = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	75fb      	strb	r3, [r7, #23]
 8000ac4:	e02a      	b.n	8000b1c <SPI_SendData+0x7c>
    } else if (DFFStatus == 1) {
 8000ac6:	8abb      	ldrh	r3, [r7, #20]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d127      	bne.n	8000b1c <SPI_SendData+0x7c>
        numBytes = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	75fb      	strb	r3, [r7, #23]
    }

    while (len > 0) {
 8000ad0:	e024      	b.n	8000b1c <SPI_SendData+0x7c>
        TxEmpty = SPI_getStatusFlag(pSPIx, SPI_FLAG_TXE);
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	68f8      	ldr	r0, [r7, #12]
 8000ad6:	f000 f829 	bl	8000b2c <SPI_getStatusFlag>
 8000ada:	4603      	mov	r3, r0
 8000adc:	74fb      	strb	r3, [r7, #19]
        while (!TxEmpty); // Block until TX Buffer is Empty
 8000ade:	bf00      	nop
 8000ae0:	7cfb      	ldrb	r3, [r7, #19]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0fc      	beq.n	8000ae0 <SPI_SendData+0x40>

        // Load the data register with the buffer

        if (DFFStatus == 0) {
 8000ae6:	8abb      	ldrh	r3, [r7, #20]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d108      	bne.n	8000afe <SPI_SendData+0x5e>
            pSPIx->DR = *pTxBuffer;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	60da      	str	r2, [r3, #12]
            (uint16_t *) pTxBuffer++;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	e00a      	b.n	8000b14 <SPI_SendData+0x74>
        } else if (DFFStatus == 1) {
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d107      	bne.n	8000b14 <SPI_SendData+0x74>

            pSPIx->DR = *((uint16_t*) pTxBuffer); // Collects 2 bytes
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	60da      	str	r2, [r3, #12]
            pTxBuffer++;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
        }

        len -= numBytes;
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	607b      	str	r3, [r7, #4]
    while (len > 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1d7      	bne.n	8000ad2 <SPI_SendData+0x32>
    }
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SPI_getStatusFlag>:
 * 
 * @param pSPIx 
 * @param FlagName - Macro used to identify the mask of the flag
 * @return uint8_t 
 */
uint8_t SPI_getStatusFlag(SPI_RegDef_t *pSPIx, uint32_t FlagName) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SPI_getStatusFlag+0x1a>
        return FLAG_SET;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <SPI_getStatusFlag+0x1c>
    } else {
        return FLAG_RESET;
 8000b46:	2300      	movs	r3, #0
    }
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	4d0d      	ldr	r5, [pc, #52]	; (8000b8c <__libc_init_array+0x38>)
 8000b58:	4c0d      	ldr	r4, [pc, #52]	; (8000b90 <__libc_init_array+0x3c>)
 8000b5a:	1b64      	subs	r4, r4, r5
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	2600      	movs	r6, #0
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	4d0b      	ldr	r5, [pc, #44]	; (8000b94 <__libc_init_array+0x40>)
 8000b66:	4c0c      	ldr	r4, [pc, #48]	; (8000b98 <__libc_init_array+0x44>)
 8000b68:	f000 f818 	bl	8000b9c <_init>
 8000b6c:	1b64      	subs	r4, r4, r5
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	2600      	movs	r6, #0
 8000b72:	42a6      	cmp	r6, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7c:	4798      	blx	r3
 8000b7e:	3601      	adds	r6, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	4798      	blx	r3
 8000b88:	3601      	adds	r6, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	08000bc0 	.word	0x08000bc0
 8000b90:	08000bc0 	.word	0x08000bc0
 8000b94:	08000bc0 	.word	0x08000bc0
 8000b98:	08000bc4 	.word	0x08000bc4

08000b9c <_init>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	bf00      	nop
 8000ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba2:	bc08      	pop	{r3}
 8000ba4:	469e      	mov	lr, r3
 8000ba6:	4770      	bx	lr

08000ba8 <_fini>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	bf00      	nop
 8000bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bae:	bc08      	pop	{r3}
 8000bb0:	469e      	mov	lr, r3
 8000bb2:	4770      	bx	lr
