
002PeriClockEnable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000124  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  4 .ARM          00000000  080002d0  080002d0  000102d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d0  080002d8  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d0  080002d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102d8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 14 .debug_info   000000e7  00000000  00000000  0001034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000086  00000000  00000000  00010432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000048  00000000  00000000  000104b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000002c  00000000  00000000  00010500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f82  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000003d5  00000000  00000000  000114ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003cd2  00000000  00000000  00011883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000058  00000000  00000000  00015558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  000155b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080002b8 	.word	0x080002b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080002b8 	.word	0x080002b8

080001ec <main>:

// ---------------------------------------------
#include <stdint.h>

int main(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	 * Method:
	 * - Enable the peripheral clock by using an RCC register, and set the 8th bit to enable ADC1
	 * - Set the 8th bit of the ADC_CR1 register
	 */

	uint32_t *pAPB2Reg = (uint32_t *) RCC_APB2_REG_ADDR;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <main+0x28>)
 80001f4:	607b      	str	r3, [r7, #4]
	*pAPB2Reg |= (1 << 8); // Set the 8th bit
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]


	uint32_t *pAdcCr1Reg = (uint32_t *) ADC_CR1_REG_ADDR;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <main+0x2c>)
 8000204:	603b      	str	r3, [r7, #0]
	*pAdcCr1Reg |= (1 << 8); // Set the 8th bit
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	601a      	str	r2, [r3, #0]

	for(;;);
 8000212:	e7fe      	b.n	8000212 <main+0x26>
 8000214:	40023844 	.word	0x40023844
 8000218:	40012004 	.word	0x40012004

0800021c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800021c:	480d      	ldr	r0, [pc, #52]	; (8000254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000220:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490d      	ldr	r1, [pc, #52]	; (800025c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0d      	ldr	r2, [pc, #52]	; (8000260 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0a      	ldr	r4, [pc, #40]	; (8000268 <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024a:	f000 f811 	bl	8000270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024e:	f7ff ffcd 	bl	80001ec <main>

08000252 <LoopForever>:

LoopForever:
  b LoopForever
 8000252:	e7fe      	b.n	8000252 <LoopForever>
  ldr   r0, =_estack
 8000254:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800025c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000260:	080002d8 	.word	0x080002d8
  ldr r2, =_sbss
 8000264:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000268:	2000001c 	.word	0x2000001c

0800026c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC_IRQHandler>
	...

08000270 <__libc_init_array>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	4d0d      	ldr	r5, [pc, #52]	; (80002a8 <__libc_init_array+0x38>)
 8000274:	4c0d      	ldr	r4, [pc, #52]	; (80002ac <__libc_init_array+0x3c>)
 8000276:	1b64      	subs	r4, r4, r5
 8000278:	10a4      	asrs	r4, r4, #2
 800027a:	2600      	movs	r6, #0
 800027c:	42a6      	cmp	r6, r4
 800027e:	d109      	bne.n	8000294 <__libc_init_array+0x24>
 8000280:	4d0b      	ldr	r5, [pc, #44]	; (80002b0 <__libc_init_array+0x40>)
 8000282:	4c0c      	ldr	r4, [pc, #48]	; (80002b4 <__libc_init_array+0x44>)
 8000284:	f000 f818 	bl	80002b8 <_init>
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	10a4      	asrs	r4, r4, #2
 800028c:	2600      	movs	r6, #0
 800028e:	42a6      	cmp	r6, r4
 8000290:	d105      	bne.n	800029e <__libc_init_array+0x2e>
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f855 3b04 	ldr.w	r3, [r5], #4
 8000298:	4798      	blx	r3
 800029a:	3601      	adds	r6, #1
 800029c:	e7ee      	b.n	800027c <__libc_init_array+0xc>
 800029e:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a2:	4798      	blx	r3
 80002a4:	3601      	adds	r6, #1
 80002a6:	e7f2      	b.n	800028e <__libc_init_array+0x1e>
 80002a8:	080002d0 	.word	0x080002d0
 80002ac:	080002d0 	.word	0x080002d0
 80002b0:	080002d0 	.word	0x080002d0
 80002b4:	080002d4 	.word	0x080002d4

080002b8 <_init>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr

080002c4 <_fini>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	bf00      	nop
 80002c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ca:	bc08      	pop	{r3}
 80002cc:	469e      	mov	lr, r3
 80002ce:	4770      	bx	lr
