
stm32f429_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000958  08000960  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000958  08000958  00010960  2**0
                  CONTENTS
  4 .ARM          00000000  08000958  08000958  00010960  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000958  08000960  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000958  08000958  00010958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800095c  0800095c  0001095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010960  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010960  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010990  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000cbe  00000000  00000000  000109d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000033a  00000000  00000000  00011691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b0  00000000  00000000  000119d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000079  00000000  00000000  00011a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000010a  00000000  00000000  00011af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000cf0  00000000  00000000  00011c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000055b1  00000000  00000000  000128f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001fc  00000000  00000000  00017ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  000180a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000940 	.word	0x08000940

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000940 	.word	0x08000940

080001ec <delay>:
 */
#if ENABLE_COMPILATION
	#define EXTERNAL_LED GPIO_PIN_NO_6
    #define EXTERNAL_BUTTON GPIO_PIN_NO_4

	void delay(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
		for (uint32_t i = 0; i < 500000; i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <delay+0x12>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <delay+0x28>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d9f8      	bls.n	80001f8 <delay+0xc>
	}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	0007a11f 	.word	0x0007a11f

08000218 <main>:

    int main(void) 
    {
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

        // GPIO Handle for LED Output 
        // Pin Name EXTERNAL_LED - GPIO Port A, Pin 6 

        GPIO_Handle_t gpio_led_red;
        gpio_led_red.pGPIOx = GPIOA;
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <main+0x74>)
 8000220:	60fb      	str	r3, [r7, #12]
        gpio_led_red.GPIO_PinConfig.GPIO_pinNumber = EXTERNAL_LED;
 8000222:	2306      	movs	r3, #6
 8000224:	743b      	strb	r3, [r7, #16]
        gpio_led_red.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000226:	2301      	movs	r3, #1
 8000228:	747b      	strb	r3, [r7, #17]
        gpio_led_red.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022a:	2302      	movs	r3, #2
 800022c:	74bb      	strb	r3, [r7, #18]
        gpio_led_red.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // Push-Pull Configuration
 800022e:	2300      	movs	r3, #0
 8000230:	753b      	strb	r3, [r7, #20]
        gpio_led_red.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // No Pull-up or Pull-down resistor
 8000232:	2300      	movs	r3, #0
 8000234:	74fb      	strb	r3, [r7, #19]

        // GPIO Handle for External Button
        // Pin Name PC4
        GPIO_Handle_t gpio_button;
        gpio_button.pGPIOx = GPIOC;
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <main+0x78>)
 8000238:	603b      	str	r3, [r7, #0]
        gpio_button.GPIO_PinConfig.GPIO_pinNumber = EXTERNAL_BUTTON;
 800023a:	2304      	movs	r3, #4
 800023c:	713b      	strb	r3, [r7, #4]
        gpio_button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800023e:	2300      	movs	r3, #0
 8000240:	717b      	strb	r3, [r7, #5]
        gpio_button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000242:	2302      	movs	r3, #2
 8000244:	71bb      	strb	r3, [r7, #6]
        gpio_button.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000246:	2301      	movs	r3, #1
 8000248:	723b      	strb	r3, [r7, #8]
        gpio_button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU; // Activates Pull-Up Resistor
 800024a:	2301      	movs	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]

        // Must Enable clock before initializing and using some peripheral
        GPIO_PeriClockControl(GPIOC, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	480f      	ldr	r0, [pc, #60]	; (8000290 <main+0x78>)
 8000252:	f000 f849 	bl	80002e8 <GPIO_PeriClockControl>
        GPIO_PeriClockControl(GPIOA, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <main+0x74>)
 800025a:	f000 f845 	bl	80002e8 <GPIO_PeriClockControl>
        GPIO_Init(&gpio_led_red);
 800025e:	f107 030c 	add.w	r3, r7, #12
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f958 	bl	8000518 <GPIO_Init>
        GPIO_Init(&gpio_button);
 8000268:	463b      	mov	r3, r7
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f954 	bl	8000518 <GPIO_Init>

        while (1) {
            if (GPIO_ReadFromInputPin(GPIOC, EXTERNAL_BUTTON) == 0) {
 8000270:	2104      	movs	r1, #4
 8000272:	4807      	ldr	r0, [pc, #28]	; (8000290 <main+0x78>)
 8000274:	f000 faa6 	bl	80007c4 <GPIO_ReadFromInputPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d1f8      	bne.n	8000270 <main+0x58>
                GPIO_ToggleOutputPin(GPIOA, EXTERNAL_LED);
 800027e:	2106      	movs	r1, #6
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x74>)
 8000282:	f000 fab5 	bl	80007f0 <GPIO_ToggleOutputPin>
                delay();
 8000286:	f7ff ffb1 	bl	80001ec <delay>
            if (GPIO_ReadFromInputPin(GPIOC, EXTERNAL_BUTTON) == 0) {
 800028a:	e7f1      	b.n	8000270 <main+0x58>
 800028c:	40020000 	.word	0x40020000
 8000290:	40020800 	.word	0x40020800

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 fb19 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ffa7 	bl	8000218 <main>

080002ca <LoopForever>:

LoopForever:
  b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000960 	.word	0x08000960
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC_IRQHandler>
	...

080002e8 <GPIO_PeriClockControl>:
 * 
 * @param pGPIOx - Address to GPIOx Peipheral
 * @param EnOrDI - Enable or Disable
 * 
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDI) {
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
    if (EnOrDI == ENABLE) {
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d178      	bne.n	80003ec <GPIO_PeriClockControl+0x104>
        if (pGPIOx == GPIOA) {
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a7a      	ldr	r2, [pc, #488]	; (80004e8 <GPIO_PeriClockControl+0x200>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x28>
            GPIOA_P_CLK_EN();
 8000302:	4b7a      	ldr	r3, [pc, #488]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a79      	ldr	r2, [pc, #484]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
        } else if (pGPIOx == GPIOK) {
            GPIOK_P_CLK_DI();
        }

    }
}
 800030e:	e0e5      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOB) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a77      	ldr	r2, [pc, #476]	; (80004f0 <GPIO_PeriClockControl+0x208>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClockControl+0x3e>
            GPIOB_P_CLK_EN();
 8000318:	4b74      	ldr	r3, [pc, #464]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a73      	ldr	r2, [pc, #460]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	e0da      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOC) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a72      	ldr	r2, [pc, #456]	; (80004f4 <GPIO_PeriClockControl+0x20c>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0x54>
            GPIOC_P_CLK_EN();
 800032e:	4b6f      	ldr	r3, [pc, #444]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a6e      	ldr	r2, [pc, #440]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e0cf      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOD) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a6e      	ldr	r2, [pc, #440]	; (80004f8 <GPIO_PeriClockControl+0x210>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0x6a>
            GPIOD_P_CLK_EN();
 8000344:	4b69      	ldr	r3, [pc, #420]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a68      	ldr	r2, [pc, #416]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e0c4      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOE) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a69      	ldr	r2, [pc, #420]	; (80004fc <GPIO_PeriClockControl+0x214>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x80>
            GPIOE_P_CLK_EN();
 800035a:	4b64      	ldr	r3, [pc, #400]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a63      	ldr	r2, [pc, #396]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e0b9      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOF) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a65      	ldr	r2, [pc, #404]	; (8000500 <GPIO_PeriClockControl+0x218>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x96>
            GPIOF_P_CLK_EN();
 8000370:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a5d      	ldr	r2, [pc, #372]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e0ae      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOG) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a60      	ldr	r2, [pc, #384]	; (8000504 <GPIO_PeriClockControl+0x21c>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0xac>
            GPIOG_P_CLK_EN();
 8000386:	4b59      	ldr	r3, [pc, #356]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a58      	ldr	r2, [pc, #352]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e0a3      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOH) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a5c      	ldr	r2, [pc, #368]	; (8000508 <GPIO_PeriClockControl+0x220>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0xc2>
            GPIOH_P_CLK_EN();
 800039c:	4b53      	ldr	r3, [pc, #332]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a52      	ldr	r2, [pc, #328]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e098      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOI) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a57      	ldr	r2, [pc, #348]	; (800050c <GPIO_PeriClockControl+0x224>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xd8>
            GPIOI_P_CLK_EN();
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a4d      	ldr	r2, [pc, #308]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e08d      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOJ) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a53      	ldr	r2, [pc, #332]	; (8000510 <GPIO_PeriClockControl+0x228>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0xee>
            GPIOJ_P_CLK_EN();
 80003c8:	4b48      	ldr	r3, [pc, #288]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a47      	ldr	r2, [pc, #284]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e082      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOK) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a4e      	ldr	r2, [pc, #312]	; (8000514 <GPIO_PeriClockControl+0x22c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d17e      	bne.n	80004dc <GPIO_PeriClockControl+0x1f4>
            GPIOK_P_CLK_EN();
 80003de:	4b43      	ldr	r3, [pc, #268]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a42      	ldr	r2, [pc, #264]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e077      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        if (pGPIOx == GPIOA) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a3e      	ldr	r2, [pc, #248]	; (80004e8 <GPIO_PeriClockControl+0x200>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x11a>
            GPIOA_P_CLK_DI();
 80003f4:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a3c      	ldr	r2, [pc, #240]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e06c      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOB) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a3a      	ldr	r2, [pc, #232]	; (80004f0 <GPIO_PeriClockControl+0x208>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x130>
            GPIOB_P_CLK_DI();
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a37      	ldr	r2, [pc, #220]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e061      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOC) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a36      	ldr	r2, [pc, #216]	; (80004f4 <GPIO_PeriClockControl+0x20c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x146>
            GPIOC_P_CLK_DI();
 8000420:	4b32      	ldr	r3, [pc, #200]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a31      	ldr	r2, [pc, #196]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000426:	f023 0304 	bic.w	r3, r3, #4
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e056      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOD) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a31      	ldr	r2, [pc, #196]	; (80004f8 <GPIO_PeriClockControl+0x210>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x15c>
            GPIOD_P_CLK_DI();
 8000436:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a2c      	ldr	r2, [pc, #176]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800043c:	f023 0308 	bic.w	r3, r3, #8
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e04b      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOE) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <GPIO_PeriClockControl+0x214>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x172>
            GPIOE_P_CLK_DI();
 800044c:	4b27      	ldr	r3, [pc, #156]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a26      	ldr	r2, [pc, #152]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e040      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOF) {
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a28      	ldr	r2, [pc, #160]	; (8000500 <GPIO_PeriClockControl+0x218>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x188>
            GPIOF_P_CLK_DI();
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a21      	ldr	r2, [pc, #132]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000468:	f023 0320 	bic.w	r3, r3, #32
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e035      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOG) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a24      	ldr	r2, [pc, #144]	; (8000504 <GPIO_PeriClockControl+0x21c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0x19e>
            GPIOG_P_CLK_DI();
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <GPIO_PeriClockControl+0x204>)
 800047e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e02a      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOH) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a1f      	ldr	r2, [pc, #124]	; (8000508 <GPIO_PeriClockControl+0x220>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x1b4>
            GPIOH_P_CLK_DI();
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <GPIO_PeriClockControl+0x204>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e01f      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOI) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a1b      	ldr	r2, [pc, #108]	; (800050c <GPIO_PeriClockControl+0x224>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x1ca>
            GPIOI_P_CLK_DI();
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a10      	ldr	r2, [pc, #64]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	e014      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOJ) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <GPIO_PeriClockControl+0x228>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x1e0>
            GPIOJ_P_CLK_DI();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c6:	e009      	b.n	80004dc <GPIO_PeriClockControl+0x1f4>
        } else if (pGPIOx == GPIOK) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <GPIO_PeriClockControl+0x22c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d105      	bne.n	80004dc <GPIO_PeriClockControl+0x1f4>
            GPIOK_P_CLK_DI();
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a05      	ldr	r2, [pc, #20]	; (80004ec <GPIO_PeriClockControl+0x204>)
 80004d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40023800 	.word	0x40023800
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020800 	.word	0x40020800
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	40021000 	.word	0x40021000
 8000500:	40021400 	.word	0x40021400
 8000504:	40021800 	.word	0x40021800
 8000508:	40021c00 	.word	0x40021c00
 800050c:	40022000 	.word	0x40022000
 8000510:	40022400 	.word	0x40022400
 8000514:	40022800 	.word	0x40022800

08000518 <GPIO_Init>:
/**
 * @brief Initializes the GPIO peripheral using the given handle
 * 
 * @param pGPIOHandle - Handle of the given GPIO Peripheral with desired configurations
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b08c      	sub	sp, #48	; 0x30
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    // Inner enum to make some logic easier

    //1. Configure the Mode of the GPIO Pin
    uint32_t temp = 0; // Temp Register for holding configuration values to set to the real register
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_PIN_MODE pinMode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Non-Interrupt Modes
    if (pinMode <= GPIO_MODE_ANALOG) {
 8000532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000536:	2b03      	cmp	r3, #3
 8000538:	d81e      	bhi.n	8000578 <GPIO_Init+0x60>

        // Changed for better readability
        // temp = pinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_pinNumber)

        // "2 *" is for the 2 bits per pin used to set the mods
        temp = pinMode << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 800053a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800053e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Set the real register
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pinNumber); // Resets
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	2103      	movs	r1, #3
 8000550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	43db      	mvns	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	400a      	ands	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp; // Sets
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000576:	e087      	b.n	8000688 <GPIO_Init+0x170>

        // 1. Configure the Edge Detection
        /*
            The pin number is the same as the specific EXTIx line. It is muxed, and the GPIO port is selected later
        */
        if (pinMode >= GPIO_MODE_ANALOG) { // If interrupt option mode
 8000578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800057c:	2b02      	cmp	r3, #2
 800057e:	d94d      	bls.n	800061c <GPIO_Init+0x104>
            switch (pinMode) {
 8000580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000584:	2b06      	cmp	r3, #6
 8000586:	d032      	beq.n	80005ee <GPIO_Init+0xd6>
 8000588:	2b06      	cmp	r3, #6
 800058a:	dc46      	bgt.n	800061a <GPIO_Init+0x102>
 800058c:	2b04      	cmp	r3, #4
 800058e:	d002      	beq.n	8000596 <GPIO_Init+0x7e>
 8000590:	2b05      	cmp	r3, #5
 8000592:	d016      	beq.n	80005c2 <GPIO_Init+0xaa>
                case GPIO_MODE_IT_RFT:
                    EXTI->FTSR |= (1 << pinNumber);
                    EXTI->RTSR |= ~(1 << pinNumber);
                    break;
                default:
                    break;
 8000594:	e041      	b.n	800061a <GPIO_Init+0x102>
                    EXTI->FTSR |= (1 << pinNumber);
 8000596:	4b88      	ldr	r3, [pc, #544]	; (80007b8 <GPIO_Init+0x2a0>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	2101      	movs	r1, #1
 800059c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a84      	ldr	r2, [pc, #528]	; (80007b8 <GPIO_Init+0x2a0>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR &= ~(1 << pinNumber);
 80005aa:	4b83      	ldr	r3, [pc, #524]	; (80007b8 <GPIO_Init+0x2a0>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	2101      	movs	r1, #1
 80005b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	43d2      	mvns	r2, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a7f      	ldr	r2, [pc, #508]	; (80007b8 <GPIO_Init+0x2a0>)
 80005bc:	400b      	ands	r3, r1
 80005be:	6093      	str	r3, [r2, #8]
                    break;
 80005c0:	e02c      	b.n	800061c <GPIO_Init+0x104>
                    EXTI->FTSR &= (1 << pinNumber);
 80005c2:	4b7d      	ldr	r3, [pc, #500]	; (80007b8 <GPIO_Init+0x2a0>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	2101      	movs	r1, #1
 80005c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a79      	ldr	r2, [pc, #484]	; (80007b8 <GPIO_Init+0x2a0>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR |= ~(1 << pinNumber);
 80005d6:	4b78      	ldr	r3, [pc, #480]	; (80007b8 <GPIO_Init+0x2a0>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	2101      	movs	r1, #1
 80005dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a74      	ldr	r2, [pc, #464]	; (80007b8 <GPIO_Init+0x2a0>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
                    break;
 80005ec:	e016      	b.n	800061c <GPIO_Init+0x104>
                    EXTI->FTSR |= (1 << pinNumber);
 80005ee:	4b72      	ldr	r3, [pc, #456]	; (80007b8 <GPIO_Init+0x2a0>)
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	2101      	movs	r1, #1
 80005f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a6e      	ldr	r2, [pc, #440]	; (80007b8 <GPIO_Init+0x2a0>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
                    EXTI->RTSR |= ~(1 << pinNumber);
 8000602:	4b6d      	ldr	r3, [pc, #436]	; (80007b8 <GPIO_Init+0x2a0>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	2101      	movs	r1, #1
 8000608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	43d2      	mvns	r2, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a69      	ldr	r2, [pc, #420]	; (80007b8 <GPIO_Init+0x2a0>)
 8000614:	430b      	orrs	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
                    break;
 8000618:	e000      	b.n	800061c <GPIO_Init+0x104>
                    break;
 800061a:	bf00      	nop
            }

        }
        // 2. Configure the GPIO Port Selection in SYSCFG_EXTICR
        uint8_t SYSCFGIndex = pinNumber / 4;
 800061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800061e:	089b      	lsrs	r3, r3, #2
 8000620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint8_t SYSCFGOffset = pinNumber % 4;
 8000624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0303 	and.w	r3, r3, #3
 800062c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t portCode = getPortCode(pGPIOHandle->pGPIOx);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 f8f1 	bl	800081c <getPortCode>
 800063a:	4603      	mov	r3, r0
 800063c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        SYSCFG_P_CLK_EN();
 8000640:	4b5e      	ldr	r3, [pc, #376]	; (80007bc <GPIO_Init+0x2a4>)
 8000642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000644:	4a5d      	ldr	r2, [pc, #372]	; (80007bc <GPIO_Init+0x2a4>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6453      	str	r3, [r2, #68]	; 0x44

        SYSCFG->EXTICR[SYSCFGIndex] |= portCode << SYSCFGOffset;
 800064c:	4a5c      	ldr	r2, [pc, #368]	; (80007c0 <GPIO_Init+0x2a8>)
 800064e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000652:	3302      	adds	r3, #2
 8000654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000658:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800065c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	4618      	mov	r0, r3
 8000666:	4956      	ldr	r1, [pc, #344]	; (80007c0 <GPIO_Init+0x2a8>)
 8000668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800066c:	4302      	orrs	r2, r0
 800066e:	3302      	adds	r3, #2
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // 3. Enable the EXTI Interrupt Delivery using IMR
        EXTI->IMR |= (1 << pinNumber); //
 8000674:	4b50      	ldr	r3, [pc, #320]	; (80007b8 <GPIO_Init+0x2a0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2101      	movs	r1, #1
 800067a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	4611      	mov	r1, r2
 8000682:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <GPIO_Init+0x2a0>)
 8000684:	430b      	orrs	r3, r1
 8000686:	6013      	str	r3, [r2, #0]
        

    }

    //2. Configure the Speed
    uint32_t pinSpeed = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	623b      	str	r3, [r7, #32]
    // "2 *" is for the 2 bits per pin used to set the mods
    temp = pinSpeed << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	6a3a      	ldr	r2, [r7, #32]
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pinNumber); // Resets
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	2103      	movs	r1, #3
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	400a      	ands	r2, r1
 80006b2:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Set the real register
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	6899      	ldr	r1, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006c0:	430a      	orrs	r2, r1
 80006c2:	609a      	str	r2, [r3, #8]
    temp = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c


    //3. Configure the Pullup-Pulldown Settings
    uint32_t pinPUPD = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	79db      	ldrb	r3, [r3, #7]
 80006cc:	61fb      	str	r3, [r7, #28]
    // "2 *" is for the 2 bits per pin used to set the mods
    temp = pinPUPD << (2 * pinNumber); // Shifts the pinMode to apply to the correct pin. 
 80006ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pinNumber); // Resets
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	2103      	movs	r1, #3
 80006e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp; // Set the real register
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68d9      	ldr	r1, [r3, #12]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000700:	430a      	orrs	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c

    //4. Configure the Output Type
    uint32_t pinOPType = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	61bb      	str	r3, [r7, #24]
    temp = pinOPType << pinNumber; // Shifts the pinMode to apply to the correct pin.
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pinNumber); // Resets
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	2103      	movs	r1, #3
 8000720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43db      	mvns	r3, r3
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	400a      	ands	r2, r1
 8000730:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp; // Set the real register
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6859      	ldr	r1, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800073e:	430a      	orrs	r2, r1
 8000740:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c

    //5. Configure the Alternate Functionality
    if (pinMode == GPIO_MODE_ALTFN) {
 8000746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800074a:	2b02      	cmp	r3, #2
 800074c:	d130      	bne.n	80007b0 <GPIO_Init+0x298>
        // Configure the Alt Function Registers

        // Calculate the position of the pin's register
        uint32_t AFRIndex = pinNumber / 8;
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	617b      	str	r3, [r7, #20]
        uint32_t AFROffset = 4 * (pinNumber % 8); // "4 *" as each pin takes 4 bits
 8000754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	613b      	str	r3, [r7, #16]
        uint32_t AFRvalue = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	895b      	ldrh	r3, [r3, #10]
 8000762:	60fb      	str	r3, [r7, #12]
        temp = AFRvalue << AFROffset;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pGPIOHandle->pGPIOx->AFR[AFRIndex] &= ~(0x3 << pinNumber); // Resets
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	3208      	adds	r2, #8
 8000776:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800077a:	2103      	movs	r1, #3
 800077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4011      	ands	r1, r2
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	3208      	adds	r2, #8
 8000790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[AFRIndex] |= temp;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007a6:	4311      	orrs	r1, r2
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	3208      	adds	r2, #8
 80007ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 80007b0:	bf00      	nop
 80007b2:	3730      	adds	r7, #48	; 0x30
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013c00 	.word	0x40013c00
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40013800 	.word	0x40013800

080007c4 <GPIO_ReadFromInputPin>:
 * 
 * @param pGPIOx - Address to the GPIO Peripheral
 * @param pinNumber - Pin to read
 * @return uint8_t - Returns a bit from the pin 
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x00000001); // Gets the (pinNumber)'th data bit from the IDR
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691a      	ldr	r2, [r3, #16]
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	fa22 f303 	lsr.w	r3, r2, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
    return value;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <GPIO_ToggleOutputPin>:
 * @brief Toggles an output pin for a specific pin for a GPIOx port
 * 
 * @param pGPIOx - Address of the GPIOx Port
 * @param pinNumber - Specific pin of the GPIOx Port
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
        0 ^ 0 = 0
        However any bit encountered with a 1 will toggle
        1 ^ 1 = 0
        1 ^ 0 = 1
    */
    pGPIOx->ODR ^= (1 << pinNumber); // Toggles the (pinNumber)th bit on the ODR
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	78fa      	ldrb	r2, [r7, #3]
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	405a      	eors	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	615a      	str	r2, [r3, #20]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <getPortCode>:
/**
 * @brief Helper Functions
 * 
 */

uint8_t getPortCode(GPIO_RegDef_t* pGPIOx) {
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
        PORT_GPIOK
    } GPIO_PORT;

    GPIO_PORT portCode;

    if (pGPIOx == GPIOA) { 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a29      	ldr	r2, [pc, #164]	; (80008cc <getPortCode+0xb0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d102      	bne.n	8000832 <getPortCode+0x16>
        portCode = PORT_GPIOA;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e044      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOB) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <getPortCode+0xb4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d102      	bne.n	8000840 <getPortCode+0x24>
        portCode = PORT_GPIOB;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e03d      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOC) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <getPortCode+0xb8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d102      	bne.n	800084e <getPortCode+0x32>
        portCode = PORT_GPIOC;
 8000848:	2302      	movs	r3, #2
 800084a:	73fb      	strb	r3, [r7, #15]
 800084c:	e036      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOD) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <getPortCode+0xbc>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d102      	bne.n	800085c <getPortCode+0x40>
        portCode = PORT_GPIOD;
 8000856:	2303      	movs	r3, #3
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e02f      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOE) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <getPortCode+0xc0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d102      	bne.n	800086a <getPortCode+0x4e>
        portCode = PORT_GPIOE;
 8000864:	2304      	movs	r3, #4
 8000866:	73fb      	strb	r3, [r7, #15]
 8000868:	e028      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOF) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <getPortCode+0xc4>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d102      	bne.n	8000878 <getPortCode+0x5c>
        portCode = PORT_GPIOF;
 8000872:	2305      	movs	r3, #5
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e021      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOG) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <getPortCode+0xc8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d102      	bne.n	8000886 <getPortCode+0x6a>
        portCode = PORT_GPIOG;
 8000880:	2306      	movs	r3, #6
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e01a      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOH) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <getPortCode+0xcc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d102      	bne.n	8000894 <getPortCode+0x78>
        portCode = PORT_GPIOH;
 800088e:	2307      	movs	r3, #7
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e013      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOI) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a15      	ldr	r2, [pc, #84]	; (80008ec <getPortCode+0xd0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d102      	bne.n	80008a2 <getPortCode+0x86>
        portCode = PORT_GPIOI;
 800089c:	2308      	movs	r3, #8
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	e00c      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOJ) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <getPortCode+0xd4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d102      	bne.n	80008b0 <getPortCode+0x94>
        portCode = PORT_GPIOJ;
 80008aa:	2309      	movs	r3, #9
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e005      	b.n	80008bc <getPortCode+0xa0>
    } else if (pGPIOx == GPIOK) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <getPortCode+0xd8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d101      	bne.n	80008bc <getPortCode+0xa0>
        portCode = PORT_GPIOK;
 80008b8:	230a      	movs	r3, #10
 80008ba:	73fb      	strb	r3, [r7, #15]
    }

    return ((uint8_t) portCode);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40021400 	.word	0x40021400
 80008e4:	40021800 	.word	0x40021800
 80008e8:	40021c00 	.word	0x40021c00
 80008ec:	40022000 	.word	0x40022000
 80008f0:	40022400 	.word	0x40022400
 80008f4:	40022800 	.word	0x40022800

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 f818 	bl	8000940 <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08000958 	.word	0x08000958
 8000934:	08000958 	.word	0x08000958
 8000938:	08000958 	.word	0x08000958
 800093c:	0800095c 	.word	0x0800095c

08000940 <_init>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	bf00      	nop
 8000944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000946:	bc08      	pop	{r3}
 8000948:	469e      	mov	lr, r3
 800094a:	4770      	bx	lr

0800094c <_fini>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr
